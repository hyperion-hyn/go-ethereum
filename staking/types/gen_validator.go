// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/numeric"
)

var _ = (*validatorMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (v Validator) MarshalJSON() ([]byte, error) {
	type Validator struct {
		Address            common.UnprefixedAddress `json:"validator_address" gencodec:"required"`
		Description        Description              `json:"description"`
		MinSelfDelegation  *math.HexOrDecimal256    `json:"min_self_delegation"`
		MaxTotalDelegation *math.HexOrDecimal256    `json:"max_total_delegation"`
		Active             bool                     `json:"-"`
		CommissionRate     numeric.Dec              `json:"commission_rate" gencodec:"required"`
		CreationHeight     *big.Int                 `json:"-"`
		Banned             bool                     `json:"-"`
	}
	var enc Validator
	enc.Address = common.UnprefixedAddress(v.Address)
	enc.Description = v.Description
	enc.MinSelfDelegation = (*math.HexOrDecimal256)(v.MinSelfDelegation)
	enc.MaxTotalDelegation = (*math.HexOrDecimal256)(v.MaxTotalDelegation)
	enc.Active = v.Active
	enc.CommissionRate = v.CommissionRate
	enc.CreationHeight = v.CreationHeight
	enc.Banned = v.Banned
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *Validator) UnmarshalJSON(input []byte) error {
	type Validator struct {
		Address            *common.UnprefixedAddress `json:"validator_address" gencodec:"required"`
		Description        *Description              `json:"description"`
		MinSelfDelegation  *math.HexOrDecimal256     `json:"min_self_delegation"`
		MaxTotalDelegation *math.HexOrDecimal256     `json:"max_total_delegation"`
		Active             *bool                     `json:"-"`
		CommissionRate     *numeric.Dec              `json:"commission_rate" gencodec:"required"`
		CreationHeight     *big.Int                  `json:"-"`
		Banned             *bool                     `json:"-"`
	}
	var dec Validator
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address == nil {
		return errors.New("missing required field 'validator_address' for Validator")
	}
	v.Address = common.Address(*dec.Address)
	if dec.Description != nil {
		v.Description = *dec.Description
	}
	if dec.MinSelfDelegation != nil {
		v.MinSelfDelegation = (*big.Int)(dec.MinSelfDelegation)
	}
	if dec.MaxTotalDelegation != nil {
		v.MaxTotalDelegation = (*big.Int)(dec.MaxTotalDelegation)
	}
	if dec.Active != nil {
		v.Active = *dec.Active
	}
	if dec.CommissionRate == nil {
		return errors.New("missing required field 'commission_rate' for Validator")
	}
	v.CommissionRate = *dec.CommissionRate
	if dec.CreationHeight != nil {
		v.CreationHeight = dec.CreationHeight
	}
	if dec.Banned != nil {
		v.Banned = *dec.Banned
	}
	return nil
}
